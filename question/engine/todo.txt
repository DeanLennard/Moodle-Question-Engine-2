Write lots of JavaDoc

Finish interaction models and core of the engine
  Interactive mode
  Opaque mode
  Each attempt builds on last
  Scroll-down JavaScript on adaptive submit button
  Minor refactoring of the different interaction models
  Questionline and answerline
  Fix manual grading of automatically graded quetsion types.

Redo the question preview window
  Fill with correct
  More display options
  Think about implementing manual grading UI.

Database load/save code
  Update functions
  Unit tests for Unit of Work
  Database update on regrading
  Make more efficient code using lazy-loading, etc.

Convert existing question type code
  Split qtype classes in three
    truefalse
    multichoice
    numerical
    random
    match
    calculated
    multianswer
    randomsamatch
  Test missing qtype
  Update qtype plugin version nubmers and requires numbers, when this is merged into core code
  New fields for editing hints

Integrate new code into the quiz
  attempting code
  reviewing code
  reports

Database upgrade script

Backup and restore code
  Restore old backup code


--------------------------------------------------------------------------------

-- Monster query to return all of a question_usage.

SELECT
    qasd.id,
    quba.id AS qubaid,
    quba.contextid,
    quba.owningplugin,
    quba.preferredmodel,
    qa.id AS questionattemptid,
    qa.questionusageid,
    qa.numberinusage,
    qa.interactionmodel,
    qa.questionid,
    qa.maxmark,
    qa.minfraction,
    qa.flagged,
    qa.questionsummary,
    qa.rightanswer,
    qa.responsesummary,
    qa.timemodified,
    qas.id AS attemptstepid,
    qas.sequencenumber,
    qas.state,
    qas.fraction,
    qas.timecreated,
    qas.userid,
    qasd.name,
    qasd.value

FROM git_question_usages quba
LEFT JOIN git_question_attempts_new qa ON qa.questionusageid = quba.id
LEFT JOIN git_question_attempt_steps qas ON qas.questionattemptid = qa.id
LEFT JOIN git_question_attempt_step_data qasd ON qasd.attemptstepid = qas.id

WHERE
    quba.id = 1

ORDER BY
    qa.numberinusage,
    qas.sequencenumber


--------------------------------------------------------------------------------

-- Note: code to drop the database tables in Postgres:

DROP TABLE git_question_usages;
DROP TABLE git_question_attempts_new;
DROP TABLE git_question_attempt_steps;
DROP TABLE git_question_attempt_step_data;


-- Note: code to create the database tables in Postgres:

CREATE TABLE git_question_usages (
    id BIGSERIAL,
    contextid BIGINT NOT NULL,
    owningplugin VARCHAR(255) NOT NULL DEFAULT '',
    preferredmodel VARCHAR(32) NOT NULL DEFAULT '',
CONSTRAINT git_quesusag_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesusag_con_fk FOREIGN KEY (contextid) REFERENCES git_context (id)
);

COMMENT ON TABLE git_question_usages IS 'This table\'s main purpose it to assign a unique id to each attempt at a set of questions by some part of Moodle. A question usage is made up of a number of question_attempts.';

CREATE TABLE git_question_attempts_new (
    id BIGSERIAL,
    questionusageid BIGINT NOT NULL,
    numberinusage BIGINT NOT NULL,
    interactionmodel VARCHAR(32) NOT NULL DEFAULT '',
    questionid BIGINT NOT NULL,
    maxmark NUMERIC(12,7) NOT NULL,
    minfraction NUMERIC(12,7) NOT NULL,
    flagged SMALLINT NOT NULL DEFAULT 0,
    questionsummary TEXT,
    rightanswer TEXT,
    responsesummary TEXT,
    timemodified BIGINT NOT NULL,
CONSTRAINT git_quesattenew_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattenew_que_fk FOREIGN KEY (questionid) REFERENCES git_question (id),
CONSTRAINT git_quesattenew_que2_fk FOREIGN KEY (questionusageid) REFERENCES git_question_usages (id)
);

COMMENT ON TABLE git_question_attempts_new IS 'Each row here corresponds to an attempt at one question, as part of a question_usage. A question_attempt will have some question_attempt_steps';

CREATE INDEX git_quesattenew_que2_ix ON git_question_attempts_new (questionusageid);

CREATE TABLE git_question_attempt_steps (
    id BIGSERIAL,
    questionattemptid BIGINT NOT NULL,
    sequencenumber BIGINT NOT NULL,
    state SMALLINT NOT NULL,
    fraction NUMERIC(12,7),
    timecreated BIGINT NOT NULL,
    userid BIGINT,
CONSTRAINT git_quesattestep_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestep_que_fk FOREIGN KEY (questionattemptid) REFERENCES git_question_attempts_new (id),
CONSTRAINT git_quesattestep_use_fk FOREIGN KEY (userid) REFERENCES git_user (id)
);

COMMENT ON TABLE git_question_attempt_steps IS 'Stores one step in in a question attempt. As well as the data here, the step will have some data in the question_attempt_step_data table.';

CREATE TABLE git_question_attempt_step_data (
    id BIGSERIAL,
    attemptstepid BIGINT NOT NULL,
    name VARCHAR(32) NOT NULL DEFAULT '',
    value TEXT,
CONSTRAINT git_quesattestepdata_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestepdata_att_fk FOREIGN KEY (attemptstepid) REFERENCES git_question_attempt_steps (id)
);

COMMENT ON TABLE git_question_attempt_step_data IS 'Each question_attempt_step has an associative array of the data that was submitted by the user in the POST request. It can also contain extra data from the question type or interaction model to avoid re-computation. The convention is that names belon';
