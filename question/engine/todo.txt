
Convert existing question type code (3d)
    Convert question types to the new API
√       multichoice 0.5d
√       match 1d

More interaction models (2d)
√   Interactive model 2d

Integrate new code into the quiz (2d)
√   backport & update key 2.0 changes (2d)
√       attemptlib.php 0.5d
√       accessmanager.php
√       view.php 0.5d
√       startattempt.php
√       attempt.php
√       processattempt.php 0.5d
√       summary.php
√       review.php
√       reviewquestion.php 0.5d
√       quiz.js
    question flag update JS - and non-js.
    quiz timer JS
    scroll-down JavaScript on adaptive/immediate/interactive submit button - but not the first on the page.
    deal with TODOs and test

<-- Christmas target milestone (7d)

Unit tests for mod/quiz/attemptlib.php (1d)

Finish converting simple question types (6.5d)
    Opaque question type 0.5d
    Numerical units 0.5d
    Refactor out commonalities between multiplechoice and truefalse rendering. 0.5d
    New fields for editing hints (4d)
        Fields on editing form 1d
        Database columns, load/save code 1d
        Import export 1d
        Use by interactive mode 1d
    Test missing qtype 1d
    Update qtype plugin version numbers and requires numbers, when this is merged into core code 0d.

Finish interaction models (2d)
    Opaque model 0.5d
    Each attempt builds on last model 1d
    Minor refactoring of the different interaction models' process_action methods. 0d
    Fix manual grading of automatically graded question types. 0.5d
    What happens when submit of an incomplete response is ignored - need verify failure message.
    Issue with whether the try-again button should be read-only. (Think teacher
            review of an in-progress attempt.)

Incorporate other OU-specific quiz customisations into this code (8d)
    Check with Phil there are no changes the reports compared to what went into 2.0.
    Plugins to convert
        oumultiresponse 1d
            fix import/export hack
        ddwtos 1d
            fix import/export hack
    Changes to preserve
        adaptive mode / overall feedback import-export refactoring 1d
        new review options on the editing form/db/backup and restore/config/defaults 1.5d
        matching question, add overall feedback fields 1d
        ou_backup_IsConvertingToStandard WTF 0.5d
        $DASHBOARD_COUNTER crap 0.5d
        quiz backup version 0d
        OCI revisioneditor stuff 0.5d
    Changes to eliminate (with permission)
        nasty hack  in report.php and tabs.php to prevent tutors accessing the responses report (check separate groups works). 0.5d
    Review lang files as a double-check that nothing was missed. 0.5d
    Don't auto redirect to edit.php for empty quizzes. 0d
    Activity completion changes. 0d
√   Files to delete 0d
√       attempt_close_js.php
√       jstimer.php

<-- Working quiz studnet interface milestone

Finish question engine core (0d)
    Questionline and answerline - probably best to do while working on quiz reports.

Integrate new code into the quiz reports (7d)
    Start with Moodle 2.0 reports.
    overview 2d
    responses 1d
    manual grading 1d
    statistics 4d

Finish database load/save code (4d)
    Garbage collect old preview question usages. 0d
    Make more efficient code using lazy-loading, etc. 2d
    Unit tests for Unit of Work 1d
    Database update on regrading 0.5d

<-- Working quiz reports milestone

Database upgrade script (8d)
    For OU Moodle 5d
    For Moodle 2.x 3d
    Deal with question images 0d

Backup and restore code (7d)
    Implement backup and restore of the new database tables 2d
    Restore old backup code ? 5d
    Decide what to do about pre-Moodle 1.5 backups ? 0d?

<-- Working upgrade and backup/restore milestone

Port the code to Moodle 2.x (4d)
    Convert question/engine/datalib.php 1d
    Get rid of question/engine/compatibility 0d
    Update file handling 2.5d
    Update unit tests to PHP Unit. 0.5d

Convert complex question types to the new API (8d)
    calculated 3d
    multianswer 3d
    randomsamatch 2d

Documentation (2d)
    Finish http://docs.moodle.org/en/Development:Developing_a_Question_Type 0.5d
    Overview of how the system works. 1d
    Guide for module (or other plugin authors) wanting to use the question engine in their code. 0.5d

<-- Ready to go into Moodle core milestone.

Performance testing 5d
    Load test the entire quiz (count DB queries and time)
    Profile some key parts of the question processing.

>-- The following items are things that it would be nice to do later.

Quiz module renderers (4d)
    Make a renderer for quesion navigation 1d.
    Make a renderer for each (student) quiz page. 3d

Enhance the question preview window (3d)
    Think about implementing manual grading UI 3d


--------------------------------------------------------------------------------

-- Monster query to return all of a question_usage.

SELECT
    qasd.id,
    quba.id AS qubaid,
    quba.contextid,
    quba.owningplugin,
    quba.preferredmodel,
    qa.id AS questionattemptid,
    qa.questionusageid,
    qa.numberinusage,
    qa.interactionmodel,
    qa.questionid,
    qa.maxmark,
    qa.minfraction,
    qa.flagged,
    qa.questionsummary,
    qa.rightanswer,
    qa.responsesummary,
    qa.timemodified,
    qas.id AS attemptstepid,
    qas.sequencenumber,
    qas.state,
    qas.fraction,
    qas.timecreated,
    qas.userid,
    qasd.name,
    qasd.value

FROM git_question_usages quba
LEFT JOIN git_question_attempts_new qa ON qa.questionusageid = quba.id
LEFT JOIN git_question_attempt_steps qas ON qas.questionattemptid = qa.id
LEFT JOIN git_question_attempt_step_data qasd ON qasd.attemptstepid = qas.id

WHERE
    quba.id = 1

ORDER BY
    qa.numberinusage,
    qas.sequencenumber


--------------------------------------------------------------------------------

-- Code to drop the database tables:

DROP TABLE git_question_usages;
DROP TABLE git_question_attempts_new;
DROP TABLE git_question_attempt_steps;
DROP TABLE git_question_attempt_step_data;


-- Code to create the database tables in Postgres:

CREATE TABLE git_question_usages (
    id BIGSERIAL,
    contextid BIGINT NOT NULL,
    owningplugin VARCHAR(255) NOT NULL DEFAULT '',
    preferredmodel VARCHAR(32) NOT NULL DEFAULT '',
CONSTRAINT git_quesusag_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesusag_con_fk FOREIGN KEY (contextid) REFERENCES git_context (id)
);

COMMENT ON TABLE git_question_usages IS 'This table\'s main purpose it to assign a unique id to each attempt at a set of questions by some part of Moodle. A question usage is made up of a number of question_attempts.';

CREATE TABLE git_question_attempts_new (
    id BIGSERIAL,
    questionusageid BIGINT NOT NULL,
    numberinusage BIGINT NOT NULL,
    interactionmodel VARCHAR(32) NOT NULL DEFAULT '',
    questionid BIGINT NOT NULL,
    maxmark NUMERIC(12,7) NOT NULL,
    minfraction NUMERIC(12,7) NOT NULL,
    flagged SMALLINT NOT NULL DEFAULT 0,
    questionsummary TEXT,
    rightanswer TEXT,
    responsesummary TEXT,
    timemodified BIGINT NOT NULL,
CONSTRAINT git_quesattenew_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattenew_que_fk FOREIGN KEY (questionid) REFERENCES git_question (id),
CONSTRAINT git_quesattenew_que2_fk FOREIGN KEY (questionusageid) REFERENCES git_question_usages (id)
);

COMMENT ON TABLE git_question_attempts_new IS 'Each row here corresponds to an attempt at one question, as part of a question_usage. A question_attempt will have some question_attempt_steps';

CREATE INDEX git_quesattenew_que2_ix ON git_question_attempts_new (questionusageid);

CREATE TABLE git_question_attempt_steps (
    id BIGSERIAL,
    questionattemptid BIGINT NOT NULL,
    sequencenumber BIGINT NOT NULL,
    state SMALLINT NOT NULL,
    fraction NUMERIC(12,7),
    timecreated BIGINT NOT NULL,
    userid BIGINT,
CONSTRAINT git_quesattestep_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestep_que_fk FOREIGN KEY (questionattemptid) REFERENCES git_question_attempts_new (id),
CONSTRAINT git_quesattestep_use_fk FOREIGN KEY (userid) REFERENCES git_user (id)
);

COMMENT ON TABLE git_question_attempt_steps IS 'Stores one step in in a question attempt. As well as the data here, the step will have some data in the question_attempt_step_data table.';

CREATE TABLE git_question_attempt_step_data (
    id BIGSERIAL,
    attemptstepid BIGINT NOT NULL,
    name VARCHAR(32) NOT NULL DEFAULT '',
    value TEXT,
CONSTRAINT git_quesattestepdata_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestepdata_att_fk FOREIGN KEY (attemptstepid) REFERENCES git_question_attempt_steps (id)
);

COMMENT ON TABLE git_question_attempt_step_data IS 'Each question_attempt_step has an associative array of the data that was submitted by the user in the POST request. It can also contain extra data from the question type or interaction model to avoid re-computation. The convention is that names belon';


-- Code to create the database tables in MySQL:

CREATE TABLE question_usages (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    contextid BIGINT(10) unsigned NOT NULL,
    owningplugin VARCHAR(255) NOT NULL DEFAULT '',
    preferredmodel VARCHAR(32) NOT NULL DEFAULT '',
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_usages COMMENT='This table\'s main purpose it to assign a unique id to each a';

CREATE INDEX quesusag_con_ix ON question_usages (contextid);

CREATE TABLE question_attempts_new (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    questionusageid BIGINT(10) unsigned NOT NULL,
    numberinusage BIGINT(10) unsigned NOT NULL,
    interactionmodel VARCHAR(32) NOT NULL DEFAULT '',
    questionid BIGINT(10) unsigned NOT NULL,
    maxmark NUMERIC(12,7) NOT NULL,
    minfraction NUMERIC(12,7) unsigned NOT NULL,
    flagged TINYINT(1) unsigned NOT NULL DEFAULT 0,
    questionsummary TEXT,
    rightanswer TEXT,
    responsesummary TEXT,
    timemodified BIGINT(10) unsigned NOT NULL,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempts_new COMMENT='Each row here corresponds to an attempt at one question, as ';

CREATE UNIQUE INDEX quesattenew_quenum_uix ON question_attempts_new (questionusageid, numberinusage);

CREATE INDEX quesattenew_que_ix ON question_attempts_new (questionid);

CREATE INDEX quesattenew_que2_ix ON question_attempts_new (questionusageid);

CREATE TABLE question_attempt_steps (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    questionattemptid BIGINT(10) unsigned NOT NULL,
    sequencenumber BIGINT(10) unsigned NOT NULL,
    state SMALLINT(4) NOT NULL,
    fraction NUMERIC(12,7) DEFAULT NULL,
    timecreated BIGINT(10) unsigned NOT NULL,
    userid BIGINT(10) unsigned DEFAULT NULL,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempt_steps COMMENT='Stores one step in in a question attempt. As well as the dat';

CREATE UNIQUE INDEX quesattestep_queseq_uix ON question_attempt_steps (questionattemptid, sequencenumber);

CREATE INDEX quesattestep_que_ix ON question_attempt_steps (questionattemptid);

CREATE INDEX quesattestep_use_ix ON question_attempt_steps (userid);

CREATE TABLE question_attempt_step_data (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    attemptstepid BIGINT(10) unsigned NOT NULL,
    name VARCHAR(32) NOT NULL DEFAULT '',
    value TEXT,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempt_step_data COMMENT='Each question_attempt_step has an associative array of the d';

CREATE UNIQUE INDEX quesattestepdata_attnam_uix ON question_attempt_step_data (attemptstepid, name);

CREATE INDEX quesattestepdata_att_ix ON question_attempt_step_data (attemptstepid);
