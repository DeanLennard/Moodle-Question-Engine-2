Finish question engine core
    Questionline and answerline

Database load/save code
    Garbage collect old preview question usages.
    Unit tests for Unit of Work

Finish interaction models
    Interactive model
    Opaque model
    Each attempt builds on last model
    Scroll-down JavaScript on adaptive/immediate/interactive submit button - but not the first on the page.
    Minor refactoring of the different interaction models' process_action methods.
    Fix manual grading of automatically graded question types.

Convert existing question type code
    Convert question types to the new API
        multichoice
        match
    Numerical units
    Refactor out commonalities between multiplechoice and truefalse rendering.
    Test missing qtype

<-- Christmas target milestone.

Convert existing question type code
    New fields for editing hints
    Convert question types to the new API
        calculated
        multianswer
        randomsamatch
    Update qtype plugin version nubmers and requires numbers, when this is merged into core code

Integrate new code into the quiz
    attempt code
    review code
    review single question code
    reports
        overview
        responses
        manual grading
        statistics

Database load/save code
    Database update on regrading
    Make more efficient code using lazy-loading, etc.

Incorporate other OU-specific quiz customisations into this code
    Needs to be quantified
    ...

Performance testing
    Load test the entire quiz (count DB queries and time)
    Profile some key parts of the question processing.

Port the code to Moodle 2.x
    Convert question/engine/datalib.php
    Get rid of question/engine/compatibility
    Update file handling.

Documentation
    Finish http://docs.moodle.org/en/Development:Developing_a_Question_Type
    Overview of how the system works.
    Guide for module (or other plugin authors) wanting to use the question engine in their code.

Database upgrade script
    For OU Moodle
    For Moodle 2.x
    Deal with question images

Backup and restore code
    Implement backup and restore of the new database tables
    Restore old backup code
    Decide what to do about pre-Moodle 1.5 backups

Enhance the question preview window
    Think about implementing manual grading UI


--------------------------------------------------------------------------------

-- Monster query to return all of a question_usage.

SELECT
    qasd.id,
    quba.id AS qubaid,
    quba.contextid,
    quba.owningplugin,
    quba.preferredmodel,
    qa.id AS questionattemptid,
    qa.questionusageid,
    qa.numberinusage,
    qa.interactionmodel,
    qa.questionid,
    qa.maxmark,
    qa.minfraction,
    qa.flagged,
    qa.questionsummary,
    qa.rightanswer,
    qa.responsesummary,
    qa.timemodified,
    qas.id AS attemptstepid,
    qas.sequencenumber,
    qas.state,
    qas.fraction,
    qas.timecreated,
    qas.userid,
    qasd.name,
    qasd.value

FROM git_question_usages quba
LEFT JOIN git_question_attempts_new qa ON qa.questionusageid = quba.id
LEFT JOIN git_question_attempt_steps qas ON qas.questionattemptid = qa.id
LEFT JOIN git_question_attempt_step_data qasd ON qasd.attemptstepid = qas.id

WHERE
    quba.id = 1

ORDER BY
    qa.numberinusage,
    qas.sequencenumber


--------------------------------------------------------------------------------

-- Code to drop the database tables:

DROP TABLE git_question_usages;
DROP TABLE git_question_attempts_new;
DROP TABLE git_question_attempt_steps;
DROP TABLE git_question_attempt_step_data;


-- Code to create the database tables in Postgres:

CREATE TABLE git_question_usages (
    id BIGSERIAL,
    contextid BIGINT NOT NULL,
    owningplugin VARCHAR(255) NOT NULL DEFAULT '',
    preferredmodel VARCHAR(32) NOT NULL DEFAULT '',
CONSTRAINT git_quesusag_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesusag_con_fk FOREIGN KEY (contextid) REFERENCES git_context (id)
);

COMMENT ON TABLE git_question_usages IS 'This table\'s main purpose it to assign a unique id to each attempt at a set of questions by some part of Moodle. A question usage is made up of a number of question_attempts.';

CREATE TABLE git_question_attempts_new (
    id BIGSERIAL,
    questionusageid BIGINT NOT NULL,
    numberinusage BIGINT NOT NULL,
    interactionmodel VARCHAR(32) NOT NULL DEFAULT '',
    questionid BIGINT NOT NULL,
    maxmark NUMERIC(12,7) NOT NULL,
    minfraction NUMERIC(12,7) NOT NULL,
    flagged SMALLINT NOT NULL DEFAULT 0,
    questionsummary TEXT,
    rightanswer TEXT,
    responsesummary TEXT,
    timemodified BIGINT NOT NULL,
CONSTRAINT git_quesattenew_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattenew_que_fk FOREIGN KEY (questionid) REFERENCES git_question (id),
CONSTRAINT git_quesattenew_que2_fk FOREIGN KEY (questionusageid) REFERENCES git_question_usages (id)
);

COMMENT ON TABLE git_question_attempts_new IS 'Each row here corresponds to an attempt at one question, as part of a question_usage. A question_attempt will have some question_attempt_steps';

CREATE INDEX git_quesattenew_que2_ix ON git_question_attempts_new (questionusageid);

CREATE TABLE git_question_attempt_steps (
    id BIGSERIAL,
    questionattemptid BIGINT NOT NULL,
    sequencenumber BIGINT NOT NULL,
    state SMALLINT NOT NULL,
    fraction NUMERIC(12,7),
    timecreated BIGINT NOT NULL,
    userid BIGINT,
CONSTRAINT git_quesattestep_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestep_que_fk FOREIGN KEY (questionattemptid) REFERENCES git_question_attempts_new (id),
CONSTRAINT git_quesattestep_use_fk FOREIGN KEY (userid) REFERENCES git_user (id)
);

COMMENT ON TABLE git_question_attempt_steps IS 'Stores one step in in a question attempt. As well as the data here, the step will have some data in the question_attempt_step_data table.';

CREATE TABLE git_question_attempt_step_data (
    id BIGSERIAL,
    attemptstepid BIGINT NOT NULL,
    name VARCHAR(32) NOT NULL DEFAULT '',
    value TEXT,
CONSTRAINT git_quesattestepdata_id2_pk PRIMARY KEY (id),
CONSTRAINT git_quesattestepdata_att_fk FOREIGN KEY (attemptstepid) REFERENCES git_question_attempt_steps (id)
);

COMMENT ON TABLE git_question_attempt_step_data IS 'Each question_attempt_step has an associative array of the data that was submitted by the user in the POST request. It can also contain extra data from the question type or interaction model to avoid re-computation. The convention is that names belon';


-- Code to create the database tables in MySQL:

CREATE TABLE question_usages (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    contextid BIGINT(10) unsigned NOT NULL,
    owningplugin VARCHAR(255) NOT NULL DEFAULT '',
    preferredmodel VARCHAR(32) NOT NULL DEFAULT '',
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_usages COMMENT='This table\'s main purpose it to assign a unique id to each a';

CREATE INDEX quesusag_con_ix ON question_usages (contextid);

CREATE TABLE question_attempts_new (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    questionusageid BIGINT(10) unsigned NOT NULL,
    numberinusage BIGINT(10) unsigned NOT NULL,
    interactionmodel VARCHAR(32) NOT NULL DEFAULT '',
    questionid BIGINT(10) unsigned NOT NULL,
    maxmark NUMERIC(12,7) NOT NULL,
    minfraction NUMERIC(12,7) unsigned NOT NULL,
    flagged TINYINT(1) unsigned NOT NULL DEFAULT 0,
    questionsummary TEXT,
    rightanswer TEXT,
    responsesummary TEXT,
    timemodified BIGINT(10) unsigned NOT NULL,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempts_new COMMENT='Each row here corresponds to an attempt at one question, as ';

CREATE UNIQUE INDEX quesattenew_quenum_uix ON question_attempts_new (questionusageid, numberinusage);

CREATE INDEX quesattenew_que_ix ON question_attempts_new (questionid);

CREATE INDEX quesattenew_que2_ix ON question_attempts_new (questionusageid);

CREATE TABLE question_attempt_steps (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    questionattemptid BIGINT(10) unsigned NOT NULL,
    sequencenumber BIGINT(10) unsigned NOT NULL,
    state SMALLINT(4) NOT NULL,
    fraction NUMERIC(12,7) DEFAULT NULL,
    timecreated BIGINT(10) unsigned NOT NULL,
    userid BIGINT(10) unsigned DEFAULT NULL,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempt_steps COMMENT='Stores one step in in a question attempt. As well as the dat';

CREATE UNIQUE INDEX quesattestep_queseq_uix ON question_attempt_steps (questionattemptid, sequencenumber);

CREATE INDEX quesattestep_que_ix ON question_attempt_steps (questionattemptid);

CREATE INDEX quesattestep_use_ix ON question_attempt_steps (userid);

CREATE TABLE question_attempt_step_data (
    id BIGINT(10) unsigned NOT NULL auto_increment,
    attemptstepid BIGINT(10) unsigned NOT NULL,
    name VARCHAR(32) NOT NULL DEFAULT '',
    value TEXT,
CONSTRAINT  PRIMARY KEY (id)
);

ALTER TABLE question_attempt_step_data COMMENT='Each question_attempt_step has an associative array of the d';

CREATE UNIQUE INDEX quesattestepdata_attnam_uix ON question_attempt_step_data (attemptstepid, name);

CREATE INDEX quesattestepdata_att_ix ON question_attempt_step_data (attemptstepid);
